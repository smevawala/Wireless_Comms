%% Wireless Comms mini Matlab 2
%Neema Aggarwal
%Shivam Mevawala
%nicobitch

close all;
SNR = -4:1:20; %list of SNR values to run algorithm
%intialize vecs
BER_flat=zeros(length(SNR));
BER_sel=zeros(length(SNR));

n=3072; %number of samples
m=4; %QPSK is 4-QAM
delayVector = 1.0e-004 * [0 0.0400 0.0800 0.1200];  % Discrete delays of
                                                    % four-path channel (s)
gainVector = [0 -3 -6 -9];

rchan_flat=rayleighchan(1e-5,1e4);
rchan_flat.StoreHistory = 1;
rchan_flat.StorePathGains = 1;

rchan_sel=rayleighchan(1e-5,1e4, delayVector, gainVector);
rchan_sel.StoreHistory = 1;
rchan_sel.StorePathGains = 1;
%use the SNR to calculate EbNo for the normal sytem and the convolutional
%coder
EbNo = SNR -10*log10(log2(m));
eqlms = lineareq(4,lms(0.03));


%loop over SNR values
for k=1:length(SNR)
    %generate a random vector of 4 symbols
    X=randi([0 m-1],1,n);
    %modulate
    Y=qammod(X,m);
    %add noise
%     Y =awgn(Y, SNR(k),'measured');
    A=filter(rchan_flat,Y);
    As=filter(rchan_sel,Y);
    A = awgn(A, SNR(k),'measured');
    As = awgn(As, SNR(k),'measured');
    %demodulate
    Ase=equalize(eqlms,As,Y(1:200));
    Z=qamdemod(A./rchan_flat.PathGains.',m);
    Zs=qamdemod(Ase,m);
    %calculate bit error rate
%     ber = sum(Z ~= X)/length(X);
    BER_flat(k)=biterr(Z,X)/(2*n);
    BER_sel(k)=biterr(Zs,X)/(2*n);
    
end

%plots



figure
% SPECT = distspec(trellis,7);
semilogy(EbNo,berfading(EbNo,'qam',4,1),'m-');
hold on;
semilogy(EbNo, BER_flat,'kx');

xlabel('EbNo (dB)')
ylabel('BER')
title('Waterfall Plots- Frequency Fading')
legend('theoretical', 'actual')


figure
semilogy(EbNo,berfading(EbNo,'qam',4,1),'m-');
hold on;
semilogy(EbNo, BER_sel,'kx');

xlabel('EbNo (dB)')
ylabel('BER')
title('Waterfall Plots- Frequency Selective')
legend('theoretical', 'actual')


